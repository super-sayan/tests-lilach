name: Remove Unused Deps
on:
  workflow_dispatch:

env:
  DEPENDENCY_TRACK_API_KEY: ${{ secrets.DEPENDENCYTRACK_APIKEY }} # API Key for using Dependecy Track API
  DEPENDENCY_TRACK_BASE_URL: ${{ secrets.API_URL }} # URL of Dependency Track API server
  DEPENDENCY_TRACK_SHORT_URL: ${{ secrets.API_SURL }}
  PROJECT_NAME: ${{ github.repository }}

jobs:
  code_analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      # Define repo for output of results.
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
      
      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        
      - name: Find Dependency Files
        id: locate-dependencies
        run: |
          echo "Searching for JavaScript/TypeScript dependency files..."
          find . -name "package.json" -exec dirname {} \; >> dependency_dirs.txt
          echo "Searching for Python dependency files..."
          find . -name "requirements.txt" -exec dirname {} \; >> dependency_dirs.txt
          # Export as a reusable list
          DEPENDENCY_DIRS=$(cat dependency_dirs.txt | tr '\n' ' ')
          echo "Found directories: $DEPENDENCY_DIRS"
          echo "DEPENDENCY_DIRS=$DEPENDENCY_DIRS" >> $GITHUB_ENV
      
      # Running Dependecy Check to define unused dependencies and create txt of unused deps.
      - name: Run Unused Dependency Check
        run: |
          echo "Unused Dependencies:" > unused_dependencies.txt
          for dir in ${{ env.DEPENDENCY_DIRS }}; do
            echo "Checking for unused dependencies in $dir..."
            cd "$dir" || exit
            if [ -f "package.json" ]; then
              echo "Running depcheck for Node.js..."
              output=$(npx depcheck || true)

              # Parse and annotate unused dependencies.
              if echo "$output" | grep -q "Unused dependencies"; then
                echo "$output" | sed -n '/Unused dependencies/,$p' | while IFS= read -r line; do
                  if [[ $line == "*"* ]]; then
                    dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                    echo "$dep" >> ../unused_dependencies.txt
                  fi
                done
              fi

              # Parse and annotate unused devDependencies.
              if echo "$output" | grep -q "Unused devDependencies"; then
                echo "$output" | sed -n '/Unused devDependencies/,$p' | while IFS= read -r line; do
                  if [[ $line == "*"* ]]; then
                    dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                    echo "$dep" >> ../unused_dependencies.txt
                  fi
                done
              fi
            else
              pip install deptry
              echo "Running deptry for Python..."
              deptry . 1> deptry_output || true
              echo "Deptry output:"
              cat deptry_output
              grep "DEP002" deptry_output | sed -E "s/requirements\.txt: DEP002 '\''([^\']+)'\'',.*$/\1/" >> ../unused_dependencies.txt
            fi
            cd - || exit
          done

          cat unused_dependencies.txt
      
      # Installing Trivy for SBOM generation.
      - name: Install Trivy for SBOM Generation
        run: |
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.58.0/trivy_0.58.0_Linux-64bit.tar.gz | sudo tar xz -C /usr/local/bin
      
      # Generating SBOM using Trivy.
      - name: Generate SBOM using Trivy
        run: |
          trivy fs --format cyclonedx --output sbom.json .
      
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Unfiltered Deps
           path: sbom.json
           
      # Remove unused dependecies from generated SBOM.
      - name: Remove Unused Dependencies from SBOM
        run: |
          echo "Removing unused dependencies from SBOM"
    
          # Read unused dependencies into a list.
          unused_deps=$(cat unused_dependencies.txt)
    
          # Convert the list into a JSON array of objects with `group` and `name`.
          unused_json=$(echo "$unused_deps" | jq -R -s '
            split("\n") | 
            map(select(length > 0)) |
            map(if test("^@") then 
                  {group: (split("/")[0]), name: (split("/")[1])} 
                else 
                  {group: null, name: .} 
                end)
          ')

          # Filter components, matching against both `group` and `name`.
          jq --argjson unused "$unused_json" '
            .components |= map(select(
              .name as $name | 
              .group as $group |
              ($unused | map(.name == $name and .group == $group) | any) | not
            ))
          ' sbom.json > filtered_sbom.json
      
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Filtered Deps
           path: filtered_sbom.json
