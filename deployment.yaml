apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "server"
  namespace: "default"
  labels:
    app: "server"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "server"
  template:
    metadata:
      labels:
        app: "server"
    spec:
      containers:
        - env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: "POSTGRES_HOST"
                  name: "server-config"
            - name: POSTGRES_PASSWORD_FILE
              valueFrom:
                configMapKeyRef:
                  key: "POSTGRES_PASSWORD_FILE"
                  name: "server-config"
            - name: SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: "SECRET_KEY"
                  name: "server-config"
            - name: FLASK_APP
              valueFrom:
                configMapKeyRef:
                  key: "FLASK_APP"
                  name: "server-config"
          name: "server"
          image: lilac764/server-repo:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
              hostPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: /run/secrets/db-password
              name: db-password
            - mountPath: /app
              name: server-volume
      volumes:
        - name: db-password
          secret:
            items:
              - key: db-password
                path: db-password
            secretName: db-password
        - name: server-volume
          hostPath:
            path: server

---

apiVersion: "v1"
kind: "ConfigMap"
metadata:
  name: "server-config"
  namespace: "default"
  labels:
    app: "server"
data:
  POSTGRES_HOST: "db"
  POSTGRES_PASSWORD_FILE: /run/secrets/db-password/db-password
  FLASK_APP: /app/app.py
  SECRET_KEY: /run/secrets/secret-key

---

apiVersion: v1
data:
  db-password: bXlzZWNyZXRwYXNzd29yZA==
kind: Secret
metadata:
  name: db-password
type: Opaque

---

apiVersion: v1
data:
  secret-key: MmUxMjAyOTdhYThjYTUwMzg2NmI0NGZkMjg4Mzg5NGUyODhlYWQxYTkyNGY1N2E1ZWFiOTkxOWNkY2Q4ZDk3YQ==
kind: Secret
metadata:
  name: secret-key
type: Opaque

---

apiVersion: "v1"
kind: "Service"
metadata:
  name: "server-service"
  namespace: "default"
  labels:
    app: "server"
spec:
  ports:
  - protocol: "TCP"
    port: 5000
    targetPort: 5000
  selector:
    app: "server"
  type: "ClusterIP"
  

---

apiVersion: "v1"
kind: "ConfigMap"
metadata:
  name: "db-config"
  namespace: "default"
  labels:
    app: "db"
data:
  POSTGRES_DB: "feedback_db"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD_FILE: /run/secrets/db-password/db-password
  PGUSER: "postgres"

---

apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "db"
  namespace: "default"
  labels:
    app: "db"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "db"
  template:
    metadata:
      labels:
        app: "db"
    spec:
      containers:
      - name: "db"
        image: lilac764/db-repo:latest
        imagePullPolicy: Always
        livenessProbe:
            exec:
              command:
                - pg_isready
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
        env:
        - name: "POSTGRES_DB"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_DB"
              name: "db-config"
        - name: "POSTGRES_USER"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_USER"
              name: "db-config"
        - name: "POSTGRES_PASSWORD_FILE"
          valueFrom:
            configMapKeyRef:
              key: "POSTGRES_PASSWORD_FILE"
              name: "db-config"
        - name: "PGUSER"
          valueFrom:
            configMapKeyRef:
              key: "PGUSER"
              name: "db-config"
        ports:
          - containerPort: 5432
            protocol: TCP
            name: db
        volumeMounts:
          - mountPath: /run/secrets/db-password
            name: db-password
          - mountPath: /var/lib/postgresql/data
            name: db-data
          - mountPath: /docker-entrypoint-initdb.d/
            name: db-volume
      restartPolicy: Always
      volumes:
        - name: db-password
          secret:
            items:
              - key: db-password
                path: db-password
            secretName: db-password
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
        - name: db-volume
          hostPath:
            path: db

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    app: db
  type: "ClusterIP"

---

apiVersion: "v1"
kind: "Service"
metadata:
  name: "client-service"
  namespace: "default"
  labels:
    app: "client"
spec:
  ports:
  - protocol: "TCP"
    port: 3000
    targetPort: 3000
  selector:
    app: "client"
  type: "LoadBalancer"
  loadBalancerIP: ""

---

apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "client"
  namespace: "default"
  labels:
    app: "client"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "client"
  template:
    metadata:
      labels:
        app: "client"
    spec:
      containers:
        - name: "client"
          image: lilac764/client-repo:latest
          imagePullPolicy: Always
          ports:
              - containerPort: 3000
                hostPort: 3000
                protocol: TCP
          volumeMounts:
            - mountPath: /user/src/app
              name: client-volume
      volumes:
        - name: client-volume
          persistentVolumeClaim:
            claimName: client-volume

    
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: client-volume
  labels:
    type: local
spec:
  storageClassName: hostpath
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  claimRef:
    namespace: default
    name: client-volume
  hostPath:
    path: 'client'
    
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: client-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

